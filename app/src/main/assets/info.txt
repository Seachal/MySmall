bundle.json 路由配置说明
（1）、uri 用于区分不同插件，相同插件的 uri 配置相同，仅仅通过 uri 跳转到其他模块的页面，进入的是其他模块页面的主入口（清单文件配置）
如果插件的清单文件中没有配置主入口，则匹配规则插件总的 MainActivity ，如果不存在，则匹配失败。

（2）、通过 rules 配置非主入口Activity，rules 是一个对象，里面元素 key:value 结构，key为跳转需要使用到的key，value为具体的activity名称
如："setting":"SettingActivity" ，跳转的方式为：Small.openUri("user/setting", MainActivity.this);（user为所属的uri）

（3）、单独使用一个 {"pkg":""} 的方式配置 lib （lib配置可以不要uri）

（4）、宿主不能依赖插件，在编译时期，lib 会被动态切换为 com.android.application ，也是一个插件，所以宿主不能依赖 lib
        issue : https://github.com/wequick/Small/issues/285

（5）、创建 lib 后，再从 lib 中将资源文件copy 回宿主app，这样编译的时候会忽略 lib 相应的资源文件，lib 中有一个 public.txt文件，里面记录了一些资源ID
此时，忽略资源后，改文件前后两次编译就不一样了，所以会报错

解决方法：删除 public.txt 重新编译，或者单独删除没有的id（这样就不需要重新编译）

（6）、每次修改 lib 的资源文件都需要重新编译，因为脚本会把每个插件编译成 .so 包，然后用宿主app 来启动运行，更改了插件中的内容，如果不重新编译，那原来的 .so 就不会更新
一般都是跑整个app 的时候才需要去构建，如果只是单独测试一个 插件，则直接跑插件就行了，不必要把整个app 跑起来，这就是插件化的优势

（7）、使用 app+* 命名的模块将被自动识别为分身模块并为所有插件模块添加该依赖，如 app+stub、app+fresco 等等。
1、必须在宿主Manifest注册的项目（这里的宿主不是主app，而是每个使用分身模块的插件模块），包括：
    所有权限
    受限 Activity
    包含了暂不支持的属性：process, configChanges 等
    可能使用 FLAG_ACTIVITY_CLEAR_TOP 标签来启动 (#415)
    任何 Provider, Service, BroadcastReceiver

2、必须在宿主占坑的资源（利用分身模块使用以下功能时，相应的资源要定义在宿主模块即相应的插件模块中），包括：
    转场动画
    通知栏图标、自定义视图
    桌面快捷方式图标



