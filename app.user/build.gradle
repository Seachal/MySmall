apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId "com.laka.appuser"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    //插件在开发阶段可作为独立app进行调试，所以可在这里更改 签名 为正式的 签名，不然一些三方SDK没法测试
    signingConfigs {
        release {
            keyAlias 'my_small'
            keyPassword 'my_small.jks'
            storePassword 'my_small.jks'
            storeFile file('keystore/my_small.jks')
        }
        debug {
            keyAlias 'my_small'
            keyPassword 'my_small.jks'
            storePassword 'my_small.jks'
            storeFile file('keystore/my_small.jks')
        }
    }
    buildTypes {
        release {
            versionNameSuffix ' (Release)'
            minifyEnabled false
            debuggable false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            versionNameSuffix ' (Debug)'
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    testCompile 'junit:junit:4.12'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:3.0.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compile project(':lib.base')
    compile project(':lib.config')
    compile project(':lib.router')
    compile project(':lib.ui')
    compile project(':lib.utils')
    implementation project(':lib.net')
}
